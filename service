#!/usr/bin/python
import shlex, subprocess, time, os, requests, traceback, threading, sys, json
from hosted import device, node, config
from select import select
from evdev import ecodes, InputDevice, list_devices
from evdev.events import KeyEvent

from flask import Flask, request, send_file
from cStringIO import StringIO
from PIL import Image

app = Flask(__name__)

@app.route('/upload', methods=['POST'])
def upload():
    images = [Image.open(request.files['pic%d' % pic]) for pic in range(1, 5)]

    # do something with the uploaded images
    images

    # Maybe some QR code as a response?
    # We use a dummy code here. You can of
    # course create something dynamic.
    qr = Image.open("qr-example.png")

    # create response image
    res = Image.new('RGBA', (1920, 1080))
    res.paste(qr, (10,10))

    # Return as PNG
    png = StringIO()
    res.save(png, 'PNG')
    png.seek(0)
    return send_file(png, mimetype='image/png')

































config.restart_on_update()
num_key = {'KEY_KP0','KEY_KP1','KEY_KP2','KEY_KP3','KEY_KP4','KEY_KP5','KEY_KP6','KEY_KP7','KEY_KP8','KEY_KP9'}
enter_key = {'KEY_KPENTER','KEY_ENTER'}
R_key = 'KEY_R'
key_down = 1
renner_nr = "" 
key_state = ""

def photo_mode():
    node.send('/photomode:')
    width, height = device.screen_resolution

#    for pic_num in range(1, 5):
    print sys.stderr, "taking picture"
    countdown = config['countdown']
#    target = config.order[pic_num-1]
    args =  "raspistill "
    args = args + "-o " + "picture.jpg " 
#    args = args + "-rot 90 "
    args = args + "-hf "
    args = args + "-p " + "%d,%d,%d,%d" % (1000,0,682,1024) + " "
    args = args + "-t " + str(countdown * 1000)+ " " # timeout in ms
    args = args + "-fp " # fullscreen preview
    args = args + "-w " + str(1365) + " "
    args = args + "-h " + str(2048) + " "
    args = args + "-v"
    print >>sys.stderr, args
    cmd_args = shlex.split(args)
    print >>sys.stderr, cmd_args
    capture = subprocess.Popen(cmd_args)
    node.send('/snap:%d,%d' % (1, countdown))
    capture.wait()
    node.send('/collage:')
    if config.upload_url:
        try:
            r = requests.post(
                url = config.upload_url,
                files = {
                    'pic1': open('picture1.jpg', 'rb'),
                    'pic2': open('picture2.jpg', 'rb'),
                    'pic3': open('picture3.jpg', 'rb'),
                    'pic4': open('picture4.jpg', 'rb'),
                },
                stream = True,
            )
            r.raise_for_status()
            if r.headers['content-type'] != "image/png":
                raise Exception("Not a PNG")
            node.write_file('dynamic.png', r.raw.read())
        except Exception as err:
            traceback.print_exc()

#    time.sleep(config.collage_time)
#    for pic_num in range(1, 5):
#    os.unlink("picture1.jpg")
#    if os.path.exists('dynamic.png'):
#        os.unlink("dynamic.png")
    node.send('/loop:')

devices = {}
def update_devices():
    new = set(list_devices("/dev/input/"))
    old = set(devices.keys())

    for device_name in new - old:
        devices[device_name] = InputDevice(device_name)

    for device_name in old - new:
        del devices[device_name]

    
    
    
def device_event(event):
#    print >>sys.stderr, event

#    if event.code in ecodes.BTN:
#        btn = ecodes.BTN[event.code]
#        if not isinstance(btn, list):
#            btn = [btn]
#        for name in btn:
#            node.send('/event/pad:%s' % json.dumps(dict(
#                key = name.replace("BTN_", "pad_").lower(),
#                action = {
#                    KeyEvent.key_up: "up",
#                    KeyEvent.key_down: "down",
#                }[event.value],
#            )))
    global renner_nr
    if event.type == ecodes.EV_KEY and event.code in ecodes.KEY:

        if event.value == key_down:
            key_in = ecodes.KEY[event.code][-1:]
            if ecodes.KEY[event.code] in num_key and len(renner_nr) <3:
               renner_nr = renner_nr + key_in
            elif ecodes.KEY[event.code] == R_key and len(renner_nr) == 0:
               renner_nr = key_in
            elif (ecodes.KEY[event.code] in num_key or ecodes.KEY[event.code] == R_key) and len(renner_nr) == 3:
               renner_nr = key_in
            elif ecodes.KEY[event.code] in enter_key:
                # compleet renner_nr
                if len(renner_nr) < 3:
                    print >>sys.stderr, "Key code " 
                    print >>sys.stderr, renner_nr[0:1]
                    if renner_nr[0:1] == 'R':
                        renner_nr ='00' + renner_nr[1:]
                        print >>sys.stderr, renner_nr
                        renner_nr = 'R' + renner_nr[-2:]
                    else:
                        renner_nr = '000' + renner_nr
                        renner_nr = renner_nr[-3:]
            node.send("/renner_nr:%s" % renner_nr)
            if ecodes.KEY[event.code] in enter_key:
                photo_mode()
                
def monitor_input():
    update_devices()
    r, w, e = select(devices.values(), [], [], 1)
    for event in r:
        try:
            for ev in event.read():
                device_event(ev)
        except IOError:
            # device disconnected
            pass

#def monitor_gpio():
##    node.send('/loop:')
#    pin, inverted = config.pin
#    device.gpio.monitor(pin, invert=inverted)
#    for _, state in device.gpio.poll_forever():
#        if state:
#            photo_mode()

def run_in_thread(fn):
    def wrap():
        try:
            while 1:
                fn()
        except Exception:
            traceback.print_exc()
            os._exit(1)
    thread = threading.Thread(target=wrap)
    thread.daemon = True
    thread.start()
            
            
if __name__ == "__main__":
    app.run(host='0.0.0.0', port=8888, debug=False)
    node.send('/loop:')
#    run_in_thread(monitor_gpio)
    run_in_thread(monitor_input)
    
    while 1: time.sleep(1000)
